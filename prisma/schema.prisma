// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPPORT
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  emailVerified     Boolean   @default(false)
  image             String?
  phone             String?
  twoFactorEnabled  Boolean   @default(false)
  isActive          Boolean   @default(true)
  role              String    @default("CUSTOMER")
  stripeCustomerId  String?   @unique
  preferredCurrency String    @default("cad")
  timezone          String    @default("UTC")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  accounts          Account[]
  sessions          Session[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  scope                 String?
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  accountId             String
  createdAt             DateTime  @default(now())
  idToken               String?
  password              String?
  providerId            String
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  updatedAt             DateTime  @updatedAt
  verificationToken     String?   @unique
  resetToken            String?   @unique
  resetTokenExpiresAt   DateTime?
  twoFactorSecret       String?
  backupCodes           String[]
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@index([verificationToken])
  @@index([resetToken])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  token     String   @unique
  updatedAt DateTime @updatedAt
  userAgent String?
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
  @@index([isActive])
  @@map("sessions")
}
