// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPPORT
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  emailVerified     Boolean   @default(false)
  image             String?
  phone             String?
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?   // Encrypted TOTP secret
  backupCodes       String[]  // Encrypted backup codes
  isActive          Boolean   @default(true)
  role              String    @default("CUSTOMER")
  stripeCustomerId  String?   @unique
  preferredCurrency String    @default("cad")
  timezone          String    @default("UTC")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  
  // Profile fields
  bio                 String?   // User bio/description
  avatarUrl           String?   // Profile avatar image URL
  phoneNumber         String?   // Profile phone number (different from auth phone)
  dateOfBirth         DateTime? // Date of birth
  location            String?   // User location
  website             String?   // Personal website URL
  socialLinks         Json?     // Social media links (Twitter, LinkedIn, GitHub, etc.)
  preferences         Json?     // User preferences (theme, notifications, privacy settings)
  lastProfileUpdate   DateTime? // Last time profile was updated
  profileCompleteness Int       @default(0) // Profile completion percentage (0-100)
  
  accounts          Account[]
  sessions          Session[]
  passwordResetTokens PasswordResetToken[]
  auditLogs         SecurityAuditLog[]
  linkedAccounts    LinkedAccount[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@index([twoFactorEnabled])
  @@index([lastProfileUpdate])
  @@index([profileCompleteness])
  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  scope                 String?
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  accountId             String
  createdAt             DateTime  @default(now())
  idToken               String?
  password              String?
  providerId            String
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  updatedAt             DateTime  @updatedAt
  verificationToken     String?   @unique
  resetToken            String?   @unique
  resetTokenExpiresAt   DateTime?
  resetTokenHash        String?   // SHA-256 hash of reset token for security
  resetRequestIp        String?   // IP address of reset request
  resetRequestUserAgent String?   // User agent of reset request
  twoFactorSecret       String?
  backupCodes           String[]
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@index([verificationToken])
  @@index([resetToken])
  @@index([resetTokenHash])
  @@map("accounts")
}

// OAuth account linking for profile management
model LinkedAccount {
  id             String   @id @default(cuid())
  userId         String
  provider       String   // 'google', 'github', 'twitter', 'linkedin'
  providerId     String   // Provider's user ID
  providerEmail  String?  // Provider's email
  displayName    String?  // Display name from provider
  profileUrl     String?  // Profile URL from provider
  avatarUrl      String?  // Avatar URL from provider
  accessToken    String?  // Encrypted access token
  refreshToken   String?  // Encrypted refresh token
  expiresAt      DateTime?
  scope          String?  // OAuth scopes granted
  isActive       Boolean  @default(true)
  linkedAt       DateTime @default(now())
  lastSyncAt     DateTime?
  metadata       Json?    // Additional provider-specific data
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@index([providerId])
  @@index([isActive])
  @@map("linked_accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  ipAddress String?
  token     String   @unique
  updatedAt DateTime @updatedAt
  userAgent String?
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
  @@index([isActive])
  @@map("sessions")
}

// Email rate limiting table
model EmailRateLimit {
  id          String   @id @default(cuid())
  email       String   
  type        String   // 'password_reset', 'verification', etc.
  requestCount Int     @default(1)
  windowStart DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([email, type])
  @@index([email])
  @@index([type])
  @@index([windowStart])
  @@map("email_rate_limits")
}

// Password reset token tracking for enhanced security
model PasswordResetToken {
  id          String   @id @default(cuid())
  userId      String
  tokenHash   String   @unique // SHA-256 hash of the actual token
  expiresAt   DateTime
  ipAddress   String?
  userAgent   String?
  isUsed      Boolean  @default(false)
  usedAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([ipAddress])
  @@index([isUsed])
  @@map("password_reset_tokens")
}

// IP-based rate limiting for additional security
model IpRateLimit {
  id           String   @id @default(cuid())
  ipAddress    String
  action       String   // 'password_reset', 'login_attempt', etc.
  requestCount Int      @default(1)
  windowStart  DateTime @default(now())
  blockedUntil DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([ipAddress, action])
  @@index([ipAddress])
  @@index([action])
  @@index([windowStart])
  @@index([blockedUntil])
  @@map("ip_rate_limits")
}

// Enhanced security audit log for comprehensive event tracking
model SecurityAuditLog {
  id          String   @id @default(cuid())
  userId      String?
  email       String?
  eventType   String   // Categorical event types: 'AUTH', 'USER_MGMT', 'SECURITY', 'DATA_ACCESS'
  action      String   // Specific action: 'login', 'logout', 'password_reset', 'failed_login', etc.
  eventData   Json?    // Structured event context and metadata
  success     Boolean  @default(true)
  severity    String   @default("INFO") // INFO, WARN, ERROR, CRITICAL
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  requestId   String?  // For correlating requests
  resource    String?  // Resource being accessed/modified
  checksum    String?  // For tamper detection (SHA-256 hash of core fields)
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([email])
  @@index([eventType])
  @@index([action])
  @@index([success])
  @@index([severity])
  @@index([createdAt])
  @@index([ipAddress])
  @@index([sessionId])
  @@index([requestId])
  @@index([checksum])
  // Composite indexes for common queries
  @@index([userId, eventType, createdAt])
  @@index([eventType, success, createdAt])
  @@index([ipAddress, action, createdAt])
  @@map("security_audit_logs")
}
