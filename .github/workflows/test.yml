name: Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - '__tests__/**'
      - '*.config.js'
      - 'package*.json'

env:
  NODE_VERSION: '18.x'

jobs:
  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-suite: [ui, services, actions, integration]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      NODE_ENV: test
      NEXTAUTH_SECRET: test-secret-key-for-ci
      NEXTAUTH_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push --accept-data-loss

      - name: Run ${{ matrix.test-suite }} tests
        run: npm run test:${{ matrix.test-suite }} -- --coverage --passWithNoTests

      - name: Upload coverage to Codecov
        if: matrix.test-suite == 'integration'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage
          fail_ci_if_error: false

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push --accept-data-loss

      - name: Run security tests
        run: npm run test:security -- --coverage

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:a11y -- --coverage

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application to start
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application to start
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      NODE_ENV: test
      NEXTAUTH_SECRET: test-secret-key-for-e2e
      NEXTAUTH_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push --accept-data-loss
          npx prisma db seed

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production

      - name: Wait for application to start
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Playwright E2E tests
        run: npx playwright test

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Check bundle size
        run: |
          npm run build
          npx bundlesize

      - name: Audit dependencies
        run: npm audit --audit-level moderate

  # Generate Test Report
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [test, security-tests, accessibility-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate comprehensive test report
        run: |
          npm run test:ci
          npm run test:coverage

      - name: Upload final coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: all-tests
          name: comprehensive-coverage
          fail_ci_if_error: true

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './coverage/coverage-summary.json';
            
            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const summary = coverage.total;
              
              const comment = `## üß™ Test Results
              
              **Coverage Summary:**
              - **Lines:** ${summary.lines.pct}% (${summary.lines.covered}/${summary.lines.total})
              - **Functions:** ${summary.functions.pct}% (${summary.functions.covered}/${summary.functions.total})
              - **Branches:** ${summary.branches.pct}% (${summary.branches.covered}/${summary.branches.total})
              - **Statements:** ${summary.statements.pct}% (${summary.statements.covered}/${summary.statements.total})
              
              **Quality Gates:**
              ${summary.lines.pct >= 85 ? '‚úÖ' : '‚ùå'} Lines Coverage (‚â•85%)
              ${summary.functions.pct >= 85 ? '‚úÖ' : '‚ùå'} Functions Coverage (‚â•85%)
              ${summary.branches.pct >= 80 ? '‚úÖ' : '‚ùå'} Branches Coverage (‚â•80%)
              ${summary.statements.pct >= 85 ? '‚úÖ' : '‚ùå'} Statements Coverage (‚â•85%)
              
              [View detailed coverage report](${process.env.CODECOV_URL})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Fail if coverage below threshold
        run: |
          if [ -f ./coverage/coverage-summary.json ]; then
            node -e "
              const coverage = require('./coverage/coverage-summary.json');
              const { lines, functions, branches, statements } = coverage.total;
              
              if (lines.pct < 85 || functions.pct < 85 || branches.pct < 80 || statements.pct < 85) {
                console.error('‚ùå Coverage below threshold');
                process.exit(1);
              } else {
                console.log('‚úÖ Coverage meets requirements');
              }
            "
          fi